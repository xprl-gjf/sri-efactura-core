@file:Suppress("PropertyName")

val jaxXjc: Configuration by configurations.creating

plugins {
    id("sri-efactura-utils.java-library-conventions")
    idea
}

repositories {
    maven {
        // TODO: remove this if/when upstream krasa-jaxb-tools publishes version 2.3 to mavenCentral.
        // See (https://github.com/fillumina/krasa-jaxb-tools/pull/2)
        url=uri("https://jitpack.io")
    }
    mavenCentral()
}

dependencies {
    api("jakarta.xml.bind:jakarta.xml.bind-api:4.0.0")
    api("jakarta.validation:jakarta.validation-api:3.0.2")
    jaxXjc("com.sun.xml.bind:jaxb-xjc:4.0.0")
    jaxXjc("com.sun.xml.bind:jaxb-impl:4.0.0")
    jaxXjc("com.github.fillumina:krasa-jaxb-tools:709066a0fe1438249a014ce6d7da4c5a75bda0b9") {
        because("xjc plugin to apply jakarta.validation annotations.")
    }
    testCompileOnly("org.jetbrains:annotations:23.0.0")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.0")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.9.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.0")
    testRuntimeOnly("com.sun.xml.bind:jaxb-impl:4.0.0")
    testRuntimeOnly("org.hibernate.validator:hibernate-validator:7.0.5.Final")
    testRuntimeOnly("org.glassfish:jakarta.el:4.0.2")
}

tasks.test {
    jvmArgs("-Duser.country=US", "-Duser.language=en")
}

/*
 * Add the Java code generated by XJC to the main source set.
 * If using IntelliJ IDEA, mark this directory as generated source code.
 */
sourceSets {
    main {
        java {
            srcDir("$buildDir/generated/sources/xjc/java")
        }
    }
}
idea {
    module {
        generatedSourceDirs.add(File("$buildDir/generated/sources/xjc/java"))
    }
}

/*
 * Copy all xsd files into a META-INF/schema directory in the resultant jar
 */
tasks.processResources {
    into("META-INF/schema") {
        include("**/*.xsd")
        from(fileTree(xsdDir).files)
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

/*
 * Generate Java source for ec.gob.sri XML comprobantes electronicos,
 * using xjc for XSD files located in src/main/sri/schema.
 *
 * If the XSD definitions change, replace or add the XSD files
 * and if necessary add a call to xjcGen below.
 */
val xsdDir = "${projectDir}/src/main/sri/META-INF/schema"

fun xsdFile(vararg pathFragments: String) = File(xsdDir, pathFragments.joinToString(File.separator) + ".xsd")
val xjcGenFactura1_0_0 = xjcGen(xsdFile("v1.0.0", "factura_V1.0.0"), "factura_bindings.xjb")
val xjcGenFactura1_1_0 = xjcGen(xsdFile("v1.1.0", "factura_V1.1.0"), "factura_bindings.xjb")
val xjcGenFactura2_0_0 = xjcGen(xsdFile("v2.0.0", "factura_V2.0.0"), "factura_bindings.xjb")
val xjcGenFactura2_1_0 = xjcGen(xsdFile("v2.1.0", "factura_V2.1.0"), "factura_bindings.xjb")
val xjcGenComprobanteRetencion1_0_0 = xjcGen(xsdFile("v1.0.0", "ComprobanteRetencion_V1.0.0"), "ComprobanteRetencion_bindings.xjb")
val xjcGenComprobanteRetencion2_0_0 = xjcGen(xsdFile("v2.0.0", "ComprobanteRetencion_V2.0.0"), "ComprobanteRetencion_bindings.xjb")
val xjcGenGuiaRemision1_0_0 = xjcGen(xsdFile("v1.0.0", "GuiaRemision_V1.0.0"), "GuiaRemision_bindings.xjb")
val xjcGenGuiaRemision1_1_0 = xjcGen(xsdFile("v1.1.0", "GuiaRemision_V1.1.0"), "GuiaRemision_bindings.xjb")
val xjcGenLiquidacionCompra1_0_0 = xjcGen(xsdFile("v1.0.0", "LiquidacionCompra_V1.0.0"), "LiquidacionCompra_bindings.xjb")
val xjcGenLiquidacionCompra1_1_0 = xjcGen(xsdFile("v1.1.0", "LiquidacionCompra_V1.1.0"), "LiquidacionCompra_bindings.xjb")
val xjcGenNotaCredito1_0_0 = xjcGen(xsdFile("v1.0.0", "NotaCredito_V1.0.0"), "NotaCredito_bindings.xjb")
val xjcGenNotaCredito1_1_0 = xjcGen(xsdFile("v1.1.0", "NotaCredito_V1.1.0"), "NotaCredito_bindings.xjb")
val xjcGenNotaDebito1_0_0 = xjcGen(xsdFile("v1.0.0", "NotaDebito_V1.0.0"), "NotaDebito_bindings.xjb")

tasks.compileJava {
    dependsOn(
        xjcGenFactura1_0_0,
        xjcGenFactura1_1_0,
        xjcGenFactura2_0_0,
        xjcGenFactura2_1_0,
        xjcGenComprobanteRetencion1_0_0,
        xjcGenComprobanteRetencion2_0_0,
        xjcGenGuiaRemision1_0_0,
        xjcGenGuiaRemision1_1_0,
        xjcGenLiquidacionCompra1_0_0,
        xjcGenLiquidacionCompra1_1_0,
        xjcGenNotaCredito1_0_0,
        xjcGenNotaCredito1_1_0,
        xjcGenNotaDebito1_0_0
    )
}

fun xjcGen(xsd: File, vararg bindings: String): Task {
    val xsdDir = xsd.parentFile
    val taskName = "xjcGen${xsd.nameWithoutExtension.capitalize()}"
    val bindStr = if (bindings.isNotEmpty()) { bindings.joinToString(",") } else null

    return task(taskName) {
        ant.project.baseDir = xsdDir
        val sourcedestdir = file("$buildDir/generated/sources/xjc/java")
        group = "code generation"
        inputs.file(xsd)
        outputs.dir(sourcedestdir)
        doLast {
            sourcedestdir.mkdirs()
            bindStr?.apply {
                System.setProperty("javax.xml.accessExternalDTD", "file")
                System.setProperty("javax.xml.accessExternalSchema", "file")
            }
            ant.withGroovyBuilder {
                "taskdef"(
                    "name" to "xjc",
                    "classname" to "com.sun.tools.xjc.XJCTask",
                    "classpath" to jaxXjc.asPath,
                )

                "xjc"(
                    "destdir" to sourcedestdir,
                    "schema" to xsd.absolutePath,
                    "catalog" to File(xsdDir, "../catalog.cat"),
                    "extension" to true,
                    "encoding" to "UTF-8",
                    "target" to "3.0"
                ) {
                    bindStr?.apply {
                        "binding"("dir" to xsdDir, "includes" to bindStr)
                    }
                    "arg"("value" to "-nv")
                    "arg"("value" to "-XJsr303Annotations")
                    "arg"("value" to "-XJsr303Annotations:validationAnnotations=jakarta")
                    "arg"("value" to "-XJsr303Annotations:notNullAnnotationsCustomMessages=ClassName")
                    "arg"("value" to "-XJsr303Annotations:JSR_349=true")
                }
            }
        }
    }
}
